package parse

import (
	"testing"

	"github.com/feloy/app/spec/api"
)

func TestParse(t *testing.T) {
	type args struct {
		devfile string
	}
	tests := []struct {
		name    string
		args    args
		want    func(t *testing.T, devfile *api.App)
		wantErr bool
	}{
		{
			name: "file not found",
			args: args{
				devfile: "not-found",
			},
			wantErr: true,
		},
		{
			name: "file found and correct",
			args: args{
				devfile: "./tests/devfile-correct.yaml",
			},
			wantErr: false,
			want: func(t *testing.T, devfile *api.App) {
				components := devfile.Components
				if len(components) != 2 {
					t.Errorf("expected 2 components, got %d", len(components))
				}
				componentApi := components[0]
				if componentApi.Name != "api" {
					t.Errorf("First component expected name 'api', got %q", componentApi.Name)
				}
				commands := componentApi.Commands
				if len(commands) != 2 {
					t.Errorf("expected 2 commands, got %d", len(commands))
				}

				commandBuild := commands[0]
				if commandBuild.Name != "build" {
					t.Errorf("First command expected name 'build', got %q", commandBuild.Name)
				}
				dependsOn := commandBuild.DependsOn
				if len(dependsOn) != 1 {
					t.Errorf("expected 1 dependsOn, got %d", len(dependsOn))
				}
				dependsOn1 := dependsOn[0]
				if dependsOn1.Command != "anotherCommand" {
					t.Errorf("expected dependOn command 'anotherCommand', got %q", dependsOn1.Command)
				}
				if dependsOn1.Component == nil || *dependsOn1.Component != "api" {
					// Generated by postParse
					t.Errorf("expected dependOn component 'api', got %v", dependsOn1.Component)
				}

				commandRun := commands[1]
				if commandRun.Name != "run" {
					t.Errorf("Second command expected name 'run', got %q", commandRun.Name)
				}
				dependsOn = commandRun.DependsOn
				if len(dependsOn) != 1 {
					t.Errorf("expected 1 dependsOn, got %d", len(dependsOn))
				}
				dependsOn1 = dependsOn[0]
				if dependsOn1.Command != "build" {
					t.Errorf("expected dependOn command 'build', got %q", dependsOn1.Command)
				}
				if dependsOn1.Component == nil || *dependsOn1.Component != "api" {
					t.Errorf("expected dependOn component 'api', got %v", dependsOn1.Component)
				}

			},
		},
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := Parse(tt.args.devfile)
			if (err != nil) != tt.wantErr {
				t.Errorf("Parse() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if tt.want != nil {
				tt.want(t, got)
			}
		})
	}
}
